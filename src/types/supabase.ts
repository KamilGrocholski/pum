/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/player": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.player.id"];
          created_at?: parameters["rowFilter.player.created_at"];
          userId?: parameters["rowFilter.player.userId"];
          lat?: parameters["rowFilter.player.lat"];
          lon?: parameters["rowFilter.player.lon"];
          arrow?: parameters["rowFilter.player.arrow"];
          map?: parameters["rowFilter.player.map"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["player"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** player */
          player?: definitions["player"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.player.id"];
          created_at?: parameters["rowFilter.player.created_at"];
          userId?: parameters["rowFilter.player.userId"];
          lat?: parameters["rowFilter.player.lat"];
          lon?: parameters["rowFilter.player.lon"];
          arrow?: parameters["rowFilter.player.arrow"];
          map?: parameters["rowFilter.player.map"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.player.id"];
          created_at?: parameters["rowFilter.player.created_at"];
          userId?: parameters["rowFilter.player.userId"];
          lat?: parameters["rowFilter.player.lat"];
          lon?: parameters["rowFilter.player.lon"];
          arrow?: parameters["rowFilter.player.arrow"];
          map?: parameters["rowFilter.player.map"];
        };
        body: {
          /** player */
          player?: definitions["player"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/test": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.test.id"];
          created_at?: parameters["rowFilter.test.created_at"];
          test?: parameters["rowFilter.test.test"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["test"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** test */
          test?: definitions["test"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.test.id"];
          created_at?: parameters["rowFilter.test.created_at"];
          test?: parameters["rowFilter.test.test"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.test.id"];
          created_at?: parameters["rowFilter.test.created_at"];
          test?: parameters["rowFilter.test.test"];
        };
        body: {
          /** test */
          test?: definitions["test"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/map": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.map.id"];
          created_at?: parameters["rowFilter.map.created_at"];
          players?: parameters["rowFilter.map.players"];
          name?: parameters["rowFilter.map.name"];
          owner?: parameters["rowFilter.map.owner"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["map"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** map */
          map?: definitions["map"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.map.id"];
          created_at?: parameters["rowFilter.map.created_at"];
          players?: parameters["rowFilter.map.players"];
          name?: parameters["rowFilter.map.name"];
          owner?: parameters["rowFilter.map.owner"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.map.id"];
          created_at?: parameters["rowFilter.map.created_at"];
          players?: parameters["rowFilter.map.players"];
          name?: parameters["rowFilter.map.name"];
          owner?: parameters["rowFilter.map.owner"];
        };
        body: {
          /** map */
          map?: definitions["map"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  player: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: uuid */
    userId?: string;
    /** Format: double precision */
    lat?: number;
    /** Format: double precision */
    lon?: number;
    /** Format: double precision */
    arrow?: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `player.id`.<fk table='player' column='id'/>
     */
    map?: number;
  };
  test: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: smallint */
    test?: number;
  };
  map: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `player.id`.<fk table='player' column='id'/>
     */
    players?: number;
    /** Format: character varying */
    name: string;
    /** Format: uuid */
    owner: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description player */
  "body.player": definitions["player"];
  /** Format: bigint */
  "rowFilter.player.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.player.created_at": string;
  /** Format: uuid */
  "rowFilter.player.userId": string;
  /** Format: double precision */
  "rowFilter.player.lat": string;
  /** Format: double precision */
  "rowFilter.player.lon": string;
  /** Format: double precision */
  "rowFilter.player.arrow": string;
  /** Format: bigint */
  "rowFilter.player.map": string;
  /** @description test */
  "body.test": definitions["test"];
  /** Format: bigint */
  "rowFilter.test.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.test.created_at": string;
  /** Format: smallint */
  "rowFilter.test.test": string;
  /** @description map */
  "body.map": definitions["map"];
  /** Format: uuid */
  "rowFilter.map.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.map.created_at": string;
  /** Format: bigint */
  "rowFilter.map.players": string;
  /** Format: character varying */
  "rowFilter.map.name": string;
  /** Format: uuid */
  "rowFilter.map.owner": string;
}

export interface operations {}

export interface external {}
